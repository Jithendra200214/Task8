-- STORED PROCEDURES AND FUNCTIONS

USE ECOMMERCEDB;

DELIMITER //
CREATE PROCEDURE GETALLCUSTOMERS()
BEGIN
     SELECT * FROM CUSTOMERS;
END // 
DELIMITER ;
CALL GETALLCUSTOMERS();

-- GET ORDERS BY CUTOMER_ID

DELIMITER //
CREATE PROCEDURE ORDERSBYCUSTOMER(IN CUST_ID INT)
BEGIN
     SELECT C.NAME,O.ORDER_ID, O.ORDER_DATE, O.TOTAL_AMOUNT
     FROM ORDERS O
     JOIN CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID
     WHERE O.CUSTOMER_ID = CUST_ID;
END //
DELIMITER ;
CALL ORDERSBYCUSTOMER(1);

-- FILTERS ORDERS BY DATE RANGE

DELIMITER //
CREATE PROCEDURE GETORDERSBYDATERANGE(IN START_DATE DATE, IN END_DATE DATE)
BEGIN
     SELECT * FROM ORDERS 
     WHERE ORDER_DATE BETWEEN START_DATE AND END_DATE;
END //
DELIMITER ;

CALL GETORDERSBYDATERANGE('2025-09-01','2025-09-26');
SELECT * FROM ORDERS;

-- TOTALSALESBYCUSTOMET
DELIMITER //
CREATE PROCEDURE TOTALSALESBYCUSTOMER()
BEGIN
     SELECT C.NAME AS CUSTOMER_NAME,C.CUSTOMER_ID,SUM(O.TOTAL_AMOUNT) AS TOTAL_SPEND
     FROM CUSTOMERS C 
     JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
     GROUP BY C.CUSTOMER_ID,C.NAME
     ORDER BY TOTAL_SPEND DESC;
END //
DELIMITER ;
drop procedure TOTALSALESBYCUSTOMER;
CALL TOTALSALESBYCUSTOMER();

DELIMITER //
CREATE PROCEDURE GetCustomerCount(OUT total_customers INT)
BEGIN
    SELECT COUNT(*) INTO total_customers FROM Customers;
END //
DELIMITER ;

CALL GetCustomerCount(@result);
SELECT @result AS Total_Customers;

-- FUNCTIONS

DELIMITER //
CREATE FUNCTION CalculateTotalPrice(qty INT, price DECIMAL(10,2))
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
    RETURN qty * price;
END //
DELIMITER ;

SELECT CalculateTotalPrice(3, 200) AS Total;

DELIMITER //
CREATE FUNCTION CountOrders(cust_id INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE total_orders INT;
    SELECT COUNT(*) INTO total_orders FROM Orders WHERE Customer_ID = cust_id;
    RETURN total_orders;
END //
DELIMITER ;

SELECT CountOrders(2) AS Total_Orders;


